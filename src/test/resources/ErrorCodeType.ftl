package com.bblackbird.violation;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

<#assign aDateTime = .now>
/**
* GENERATED BY ErrorCodeTypeGenerator BASED ON ErrorCodeTypes.csv on ${aDateTime?iso_utc}.
*/
public enum ErrorCodeType {

<#list errors as error>
    ${error}<#sep>, </#sep>
</#list>
    ;

    private final String errorMessage;
    private final ExceptionLevel level;
    private final ExceptionSource source;
    private final ExceptionType type;
    private final Class<? extends Exception> exceptionClass;
    private final FDTValidation fosValidation;

    private ErrorCodeType(String errorMessage, ExceptionLevel level, ExceptionSource source, ExceptionType type, Class<? extends Exception> exceptionClass) {
        this.errorMessage = errorMessage;
        this.level = level;
        this.source = source;
        this.type = type;
        this.exceptionClass = exceptionClass;
        this.fosValidation = FDTValidation.VAL_GPS;
    }

    private ErrorCodeType(String errorMessage, ExceptionLevel level, ExceptionSource source, ExceptionType type, Class<? extends Exception> exceptionClass, FDTValidation fosValidation) {
        this.errorMessage = errorMessage;
        this.level = level;
        this.source = source;
        this.type = type;
        this.exceptionClass = exceptionClass;
        this.fosValidation = fosValidation;
    }

    public static EnumSet<ErrorCodeType> ALL = EnumSet.allOf(ErrorCodeType.class);

    public static Map<String, ErrorCodeType> errorCodeMap = ALL.stream().collect(Collectors.toMap(ErrorCodeType::name, Function.identity()));

    public static ErrorCodeType of(String errorCodeType) {
        return errorCodeMap.get(errorCodeType);
    }

    public String getErrorCode() {
        return this.name();
    }

    public String getErrorMessage() {
        return errorMessage;
    }

    public ExceptionLevel getLevel() {
        return level;
    }

    public ExceptionSource getSource() {
        return source;
    }

    public ExceptionType getType() {
        return type;
    }

    public Class<? extends Exception> getExceptionClass() {
        return exceptionClass;
    }

    public String getExceptionClassName() {
        return exceptionClass.getSimpleName();
    }

    public FDTValidation getFosValidation() {
        return fosValidation;
    }

    public Exception exception(String errorMessage) {
        return ReflectUtils.callConstructor(this.exceptionClass, new Object[]{errorMessage});
    }

    public Exception exception(Throwable ex) {
        return ReflectUtils.callConstructor(this.exceptionClass, new Class<?>[]{Throwable.class}, new Object[]{ex});
    }

    public Exception exception(String errorMessage, Throwable ex) {
        return ReflectUtils.callConstructor(this.exceptionClass, new Class<?>[]{String.class, Throwable.class}, new Object[]{errorMessage, ex});
    }

    @Override
    public String toString() {
        return "ErrorCodeType{" +
                "errorMessage='" + errorMessage + '\'' +
                ", level=" + level +
                ", source=" + source +
                ", type=" + type +
                ", exceptionClass=" + exceptionClass +
                ", fosValidation=" + fosValidation +
                '}';
    }


}